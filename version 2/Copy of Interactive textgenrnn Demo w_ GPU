{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Copy of Interactive textgenrnn Demo w/ GPU","provenance":[{"file_id":"1mMKGnVxirJnqDViH7BDJxFqWrsXlPSoK","timestamp":1612623154080}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"qbs57FeUybgL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613193151743,"user_tz":-570,"elapsed":836,"user":{"displayName":"Kanchana Gunathilaka","photoUrl":"","userId":"08951501053370122904"}},"outputId":"3af28a0a-26a2-40db-ad58-b08723061273"},"source":["tensorflow_version 1.x"],"execution_count":null,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KBkpRgBCBS2_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613193160823,"user_tz":-570,"elapsed":9904,"user":{"displayName":"Kanchana Gunathilaka","photoUrl":"","userId":"08951501053370122904"}},"outputId":"400933a1-7628-4fa5-b0d3-5b8578b6a34d"},"source":["#!pip install tensorflow==2.3.2\n","#!pip install keras==2.3.0 \n","!pip install -q textgenrnn\n","from google.colab import files\n","from textgenrnn import textgenrnn\n","from datetime import datetime\n","import os"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"53QlbqVvqI5N","executionInfo":{"status":"ok","timestamp":1613193160824,"user_tz":-570,"elapsed":9879,"user":{"displayName":"Kanchana Gunathilaka","photoUrl":"","userId":"08951501053370122904"}},"outputId":"715f4d73-bb46-4a4d-b02b-570aa91c187a"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P8wSlgXoDPCR"},"source":["model_cfg = {\n","    'word_level': True,   # set to True if want to train a word-level model (requires more data and smaller max_length)\n","    'rnn_size': 128,   # number of LSTM cells of each layer (128/256 recommended)\n","    'rnn_layers': 3,   # number of LSTM layers (>=2 recommended)\n","    'rnn_bidirectional': False,   # consider text both forwards and backward, can give a training boost\n","    'max_length': 20,   # number of tokens to consider before predicting the next (20-40 for characters, 5-10 for words recommended)\n","    'max_words': 41000,   # maximum number of words to model; the rest will be ignored (word-level model only)\n","}\n","\n","train_cfg = {\n","    'line_delimited': True,   # set to True if each text has its own line in the source file\n","    'num_epochs': 30,   # set higher to train the model for longer\n","    'gen_epochs': 5,   # generates sample text from model after given number of epochs\n","    'train_size': 0.8,   # proportion of input data to train on: setting < 1.0 limits model from learning perfectly\n","    'dropout': 0.0,   # ignore a random proportion of source tokens each epoch, allowing model to generalize better\n","    'validation': False,   # If train__size < 1.0, test on holdout dataset; will make overall training slower\n","    'is_csv': False ,  # set to True if file is a CSV exported from Excel/BigQuery/pandas\n","     'dim_embeddings':300,\n","      'max_gen_length':50\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4kmNDVjLV3ER"},"source":["# New Section"]},{"cell_type":"code","metadata":{"id":"6OFnPCLADfll"},"source":["file_name = \"/content/drive/MyDrive/Colab Notebooks/sew_file_01_V1.txt\"\n","model_name = 'model_V2'   # change to set file name of resulting trained models/texts"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LdpZQXknFNY3"},"source":["The next cell will start the actual training. And thanks to the power of Keras's CuDNN layers, training is super-fast when compared to CPU training on a local machine!\n","\n","Ideally, you want a training loss less than `1.0` in order for the model to create sensible text consistently."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aeXshJM-Cuaf","executionInfo":{"status":"ok","timestamp":1613193210674,"user_tz":-570,"elapsed":59703,"user":{"displayName":"Kanchana Gunathilaka","photoUrl":"","userId":"08951501053370122904"}},"outputId":"1406d909-712f-4ee3-adc7-2991e1f75784"},"source":["textgen = textgenrnn(name=model_name)\n","\n","train_function = textgen.train_from_file if train_cfg['line_delimited'] else textgen.train_from_largetext_file\n","\n","train_function(\n","    file_path=file_name,\n","    new_model=True,\n","    num_epochs=train_cfg['num_epochs'],\n","    gen_epochs=train_cfg['gen_epochs'],\n","    batch_size=1024,\n","    train_size=train_cfg['train_size'],\n","    dropout=train_cfg['dropout'],\n","    validation=train_cfg['validation'],\n","    is_csv=train_cfg['is_csv'],\n","    rnn_layers=model_cfg['rnn_layers'],\n","    rnn_size=model_cfg['rnn_size'],\n","    rnn_bidirectional=model_cfg['rnn_bidirectional'],\n","    max_length=model_cfg['max_length'],\n","    max_gen_length=model_cfg['max_gen_length'],\n","    dim_embeddings=cfg['dim_embeddings'],\n","    word_level=model_cfg['word_level'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["25,604 texts collected.\n","Training new model w/ 3-layer, 128-cell LSTMs\n","Training on 29,325 character sequences.\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","Epoch 1/25\n","28/28 [==============================] - 8s 281ms/step - loss: 0.9989\n","Epoch 2/25\n","28/28 [==============================] - 1s 38ms/step - loss: 0.8391\n","Epoch 3/25\n","28/28 [==============================] - 1s 41ms/step - loss: 0.8355\n","Epoch 4/25\n","28/28 [==============================] - 1s 42ms/step - loss: 0.8392\n","Epoch 5/25\n","28/28 [==============================] - 1s 42ms/step - loss: 0.8335\n","####################\n","Temperature: 0.2\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 0.5\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 1.0\n","####################\n","\n","\n","\n","\n"," \n","\n","Epoch 6/25\n","28/28 [==============================] - 1s 36ms/step - loss: 0.8331\n","Epoch 7/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.8361\n","Epoch 8/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.8307\n","Epoch 9/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.8303\n","Epoch 10/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.8321\n","####################\n","Temperature: 0.2\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 0.5\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 1.0\n","####################\n","\n","\n","\n","\n","\n","\n","Epoch 11/25\n","28/28 [==============================] - 1s 41ms/step - loss: 0.8297\n","Epoch 12/25\n","28/28 [==============================] - 1s 44ms/step - loss: 0.8407\n","Epoch 13/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.8168\n","Epoch 14/25\n","28/28 [==============================] - 1s 44ms/step - loss: 0.6780\n","Epoch 15/25\n","28/28 [==============================] - 1s 44ms/step - loss: 0.5781\n","####################\n","Temperature: 0.2\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 0.5\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 1.0\n","####################\n","\n","\n","\n","\n","\n","\n","Epoch 16/25\n","28/28 [==============================] - 1s 42ms/step - loss: 0.5700\n","Epoch 17/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.5633\n","Epoch 18/25\n","28/28 [==============================] - 1s 42ms/step - loss: 0.5602\n","Epoch 19/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.5575\n","Epoch 20/25\n","28/28 [==============================] - 1s 42ms/step - loss: 0.5564\n","####################\n","Temperature: 0.2\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 0.5\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 1.0\n","####################\n","\n","\n","\u0000 \u0000\n","\n","\n","\n","Epoch 21/25\n","28/28 [==============================] - 1s 40ms/step - loss: 0.5519\n","Epoch 22/25\n","28/28 [==============================] - 1s 42ms/step - loss: 0.5489\n","Epoch 23/25\n","28/28 [==============================] - 1s 41ms/step - loss: 0.5396\n","Epoch 24/25\n","28/28 [==============================] - 1s 42ms/step - loss: 0.5355\n","Epoch 25/25\n","28/28 [==============================] - 1s 43ms/step - loss: 0.5322\n","####################\n","Temperature: 0.2\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 0.5\n","####################\n","\n","\n","\n","\n","\n","\n","####################\n","Temperature: 1.0\n","####################\n","\n","\n","\n","\n","\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RTa6zf3e_9gV"},"source":["You can download a large amount of generated text from your model with the cell below! Rerun the cell as many times as you want for even more text!"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"-fxL77nvAMAX","executionInfo":{"status":"ok","timestamp":1613193214339,"user_tz":-570,"elapsed":63349,"user":{"displayName":"Kanchana Gunathilaka","photoUrl":"","userId":"08951501053370122904"}},"outputId":"6bf8f66c-cdc0-4650-cb52-28a02d7a221c"},"source":["# this temperature schedule cycles between 1 very unexpected token, 1 unexpected token, 2 expected tokens, repeat.\n","# changing the temperature schedule can result in wildly different output!\n","temperature = [1.0, 0.5, 0.2, 0.2]   \n","prefix = None   # if you want each generated text to start with a given seed text\n","\n","if train_cfg['line_delimited']:\n","  n = 1000\n","  max_gen_length = 60 if model_cfg['word_level'] else 300\n","else:\n","  n = 1\n","  max_gen_length = 2000 if model_cfg['word_level'] else 10000\n","  \n","timestring = datetime.now().strftime('%Y%m%d_%H%M%S')\n","gen_file = '{}_gentext_{}.txt'.format(model_name, timestring)\n","\n","textgen.generate_to_file(gen_file,\n","                         temperature=temperature,\n","                         prefix=prefix,\n","                         n=n,\n","                         max_gen_length=max_gen_length)\n","files.download(gen_file)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_ad0763f1-7a67-42fd-8f5d-cf6ced05f077\", \"model_V2_gentext_20210213_051331.txt\", 1382)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"ClJwpF_ACONp"},"source":["You can download the weights and configuration files in the cell below, allowing you recreate the model on your own computer!"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"4RNY6RBI9LmL","executionInfo":{"status":"ok","timestamp":1613193214343,"user_tz":-570,"elapsed":63336,"user":{"displayName":"Kanchana Gunathilaka","photoUrl":"","userId":"08951501053370122904"}},"outputId":"12168801-5092-446e-ae0e-8fa1fb514938"},"source":["files.download('{}_weights.hdf5'.format(model_name))\n","files.download('{}_vocab.json'.format(model_name))\n","files.download('{}_config.json'.format(model_name))\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_2c528771-b597-4529-aa72-69fc5d9a38ab\", \"model_V2_weights.hdf5\", 1572888)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_26adb94f-6bed-4d32-80ae-4f65f5e41d20\", \"model_V2_vocab.json\", 65)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_1e025ea4-00d1-4ce3-b4c0-7634040672a8\", \"model_V2_config.json\", 205)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"oF4-PqF0Fl7R"},"source":["To recreate the model on your own computer, after installing textgenrnn and TensorFlow, you can create a Python script with:\n","\n","```\n","from textgenrnn import textgenrnn\n","textgen = textgenrnn(weights_path='colaboratory_weights.hdf5',\n","                       vocab_path='colaboratory_vocab.json',\n","                       config_path='colaboratory_config.json')\n","                       \n","textgen.generate_samples(max_gen_length=1000)\n","textgen.generate_to_file('textgenrnn_texts.txt', max_gen_length=1000)\n","```\n","\n","Have fun with your new model! :)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":214},"id":"WR4_XJpfKAIn","executionInfo":{"status":"error","timestamp":1613193214346,"user_tz":-570,"elapsed":63325,"user":{"displayName":"Kanchana Gunathilaka","photoUrl":"","userId":"08951501053370122904"}},"outputId":"16c75ca8-49a0-41c5-f1db-19960f23496c"},"source":["uploaded = drive.CreateFile({'title': '{}_weights.hdf5'.format(model_name)})\n","uploaded.SetContentFile('{}_weights.hdf5'.format(model_name))\n","uploaded.Upload()\n","print('Uploaded file with ID {}'.format(uploaded.get('id')))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-eb8eed3368a4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0muploaded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCreateFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'title'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'{}_weights.hdf5'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0muploaded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSetContentFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'{}_weights.hdf5'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0muploaded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUpload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Uploaded file with ID {}'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muploaded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'id'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'google.colab.drive' has no attribute 'CreateFile'"]}]},{"cell_type":"markdown","metadata":{"id":"ig-KVgkCDCKD"},"source":["If the notebook has errors (e.g. GPU Sync Fail), force-kill the Colaboratory virtual machine and restart it with the command below:"]},{"cell_type":"code","metadata":{"id":"rIHiVP53FnsX"},"source":["!kill -9 -1"],"execution_count":null,"outputs":[]}]}